Final Project Proposal

Leading Question: 
Knowing the power of network analysis, we will represent network as graph structure. The motivation here is to implement actual application that can be useful in networks.
We will be mainly focusing on two leading questions:
First, how to find the shortest path between two nodes, given the coordinats of every node and the distances between every two nodes on the map.
Second, how to find an area that has the most concentrated nodes connections, and possibility color them in order to distinguish the structure of the graph.
In order to solve these two problems, one algorithm is to find the shortest route and distance between two nodes, and another one is to find some nodes that has much more connections and degrees than other nodes (thus could find some areas that are more concentrated with nodes and edges).
We will use the dataset that contains the information of the x and y coordinates of every eixsted node in a city, the distance between two nodes, the nodeID, and the edgeID. We will be using these information to approach the leading questions raised above.
We will also represent the data in the form of a graph. 

Dataset Acquisition and Processing:
Data format: 
it's a set of road network nodes of San Franccisco, and it's represented by each node by x–longitude and y-latitude axis.
One dataset also provided the nodes with specific node ID to uniquely identify each node as a single road network.
The datasets are a reasonable size providing that it includes the necessary amount of road newwork nodes needed to perform necessary 
analysis. We plan on using the full dataset because the data set represents a full road network of San Fran, and by analyzing the full
dataset, we would get a more percise result.
https://www.cs.utah.edu/~lifeifei/research/tpq/SF.cnode 
https://www.cs.utah.edu/~lifeifei/research/tpq/SF.cedge  
*The above links are the links to the dataset that we will be using*

Data correction: 
We will implement functions that check for the order of the data, whether they have any missing nodes, and the order of the data on
whether it follows an increasing order. 
Every node should only have one unique node ID, or identifying information, and we would check for redundancy. 
The checks can be done by checking the node ID which should be uniquely assigned. We will also implement test cases to check for each of the correctness of the functions.
The ideal data structure should include nodes with their unique node ID, each node possess a (x,y) coordinate. 
And each edge should have corresponding start node and end node that align with the node data we provided, also the edge ID should be unique.The L2 distance of each node should be postive.



Data storage: 
We will store the data points by using the standard library map, in which the key is corresponding to the node ID and the value is a
pair of x and y coordinates in the form of (x,y), meaning the first element in the pair should be corresponding to the x coordinate
and the second element in the pair should be the y coordinate of the location of the node on a graph. 
We would also be using the standard library data structures to help processing our data/ preform necessary algorthms, such as vectors and etc. 
The storage memory used for the dataset should be O(n) providing that n is the number of road networks in San Fran. The target goal for time is O(log n). 

Traversal to use:
DFS,since our initial data conatins the L2 distance, we are dealing with a weighted graph,thus BFS is a better choice for traversal in graphs.

Graph Algorithms:
Dijkstra’s Algorithm
Tarjan's strongly connected components algorithm

Function Inputs: 
Dijkstra’s Algorithm: A start node, An end node
Tarjan's Algorithm: A graph object

Function Output: 
Dijkstra’s Algorithm: Shortest path made up of node id as a string, return “” if not found.
Tarjan's Algorithm: a set of vertices (in a stack form) that includes the connected components.

Function Efficiency: 
Dijkstra’s Algorithm: O(V+E*log(V)) by using min-priority queue. V represents the vertices of the graph and E represents the edges of the graph.
Tarjan's Algorithm: O(V+E) where V = vertices and E = edges 


Timeline:
The first target for us is to set up the whole project and perform the data correction and data storage steps. 
This will take about a week so it should be done by 4.1.
Then we will be construct the graph class, which should be done by 4.8.The shortest path should take approximately a week.
By 4.15 our progress should be on the right track. The strongly connected components algorithm could take up a week or two depending on the circumstances.
If we still have time, we will visualize the data as png output. The majority of this should be done by 4.29.
Then we will use the last week to make sure we have deliverable code and prepare for the final presentation.

*The above information may change depending on the situation, but the work should be roughly done by the specified due date above*

netID:
jh80
mukyehc2
zhiroul2
xwang320
